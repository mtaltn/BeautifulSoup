{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Finish\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "import xlsxwriter\n",
    "from bs4 import BeautifulSoup\n",
    "\n",
    "audiExcel = xlsxwriter.Workbook(\"audiExcel.xlsx\")\n",
    "\n",
    "audiExcel_raw = audiExcel.add_worksheet(\"All Audis Raw\")\n",
    "audiExcel_raw.write(\"A1\", \"Model\")\n",
    "audiExcel_raw.write(\"B1\", \"Fiyat\")\n",
    "audiExcel_raw.write(\"C1\", \"Kilometre\")\n",
    "audiExcel_raw.write(\"D1\", \"Yıl\")\n",
    "\n",
    "audiExcel_preprocess = audiExcel.add_worksheet(\"All Audis PreProcessed\")\n",
    "audiExcel_preprocess.write(\"A1\", \"Model\")\n",
    "audiExcel_preprocess.write(\"B1\", \"Fiyat\")\n",
    "audiExcel_preprocess.write(\"C1\", \"Kilometre\")\n",
    "audiExcel_preprocess.write(\"D1\", \"Yıl\")\n",
    "\n",
    "totalCar = 0\n",
    "page = 1\n",
    "\n",
    "while(page <= 20):\n",
    "    \n",
    "    r = requests.get(\"https://www.autoscout24.com.tr/lst/audi/a8?sort=standard&desc=0&fuel=D&ustate=N%2CU&size=20&page=\" + str(page) + \"&powerto=210&powerfrom=171&powertype=hp&atype=C&\")\n",
    "    data = BeautifulSoup(r.content, \"html.parser\")\n",
    "    cars = data.find_all(\"div\", {\"class\":\"cldt-summary-full-item-main\"})\n",
    "\n",
    "    for car in cars:\n",
    "        price = car.find(\"span\", {\"data-item-name\":\"price\"})\n",
    "        if(price == None):\n",
    "            continue\n",
    "\n",
    "        if(price.string == None):\n",
    "            continue\n",
    "\n",
    "        km = car.find(\"li\", {\"data-type\":\"mileage\"}) \n",
    "        age = car.find(\"li\", {\"data-type\":\"first-registration\"})\n",
    "\n",
    "        if(price.string and km.string and age.string.split(\"/\")[1]):\n",
    "            totalCar += 1\n",
    "            \n",
    "            ## MODEL\n",
    "            audiExcel_raw.write(\"A\" + str(totalCar + 1), \"A8\")\n",
    "            audiExcel_preprocess.write(\"A\" + str(totalCar + 1), 1)\n",
    "            \n",
    "            ## FİYAT\n",
    "            audiExcel_raw.write(\"B\" + str(totalCar + 1), price.string)\n",
    "            temp = \"\"\n",
    "            for char in price.string.strip():\n",
    "                if char.isnumeric():\n",
    "                    temp += char\n",
    "            price.string = temp\n",
    "            audiExcel_preprocess.write(\"B\" + str(totalCar + 1), int(price.string))\n",
    "            \n",
    "            ## KİLOMETRE\n",
    "            audiExcel_raw.write(\"C\" + str(totalCar + 1), km.string) \n",
    "            temp = \"\"\n",
    "            for char in km.string.strip():\n",
    "                if char.isnumeric():\n",
    "                    temp += char\n",
    "            km.string = temp\n",
    "            audiExcel_preprocess.write(\"C\" + str(totalCar + 1), int(km.string))\n",
    "            \n",
    "            ## YIL\n",
    "            audiExcel_raw.write(\"D\" + str(totalCar + 1), age.string.split(\"/\")[1])\n",
    "            audiExcel_preprocess.write(\"D\" + str(totalCar + 1), age.string.split(\"/\")[1]) \n",
    "            \n",
    "    r2 = requests.get(\"https://www.autoscout24.com.tr/lst/audi/a7?sort=standard&desc=0&fuel=D&ustate=N%2CU&size=20&page=\" + str(page) + \"&powerto=210&powerfrom=171&powertype=hp&atype=C&\")\n",
    "    data2 = BeautifulSoup(r2.content, \"html.parser\")\n",
    "    cars2 = data2.find_all(\"div\", {\"class\":\"cldt-summary-full-item-main\"})\n",
    "    \n",
    "    for car2 in cars2:\n",
    "        price2 = car2.find(\"span\", {\"data-item-name\":\"price\"})\n",
    "        if(price2 == None):\n",
    "            continue\n",
    "\n",
    "        if(price2.string == None):\n",
    "            continue\n",
    "\n",
    "        km2 = car2.find(\"li\", {\"data-type\":\"mileage\"}) \n",
    "        age2 = car2.find(\"li\", {\"data-type\":\"first-registration\"})\n",
    "\n",
    "        if(price2.string and km2.string and age2.string.split(\"/\")[1]):\n",
    "            totalCar += 1\n",
    "            \n",
    "            ## MODEL\n",
    "            audiExcel_raw.write(\"A\" + str(totalCar + 1), \"A7\")\n",
    "            audiExcel_preprocess.write(\"A\" + str(totalCar + 1), 0)\n",
    "            \n",
    "            ## FİYAT\n",
    "            audiExcel_raw.write(\"B\" + str(totalCar + 1), price2.string)\n",
    "            temp2 = \"\"\n",
    "            for char2 in price2.string.strip():\n",
    "                if char2.isnumeric():\n",
    "                    temp2 += char2\n",
    "            price2.string = temp2\n",
    "            audiExcel_preprocess.write(\"B\" + str(totalCar + 1), int(price2.string))\n",
    "            \n",
    "            ## KİLOMETRE\n",
    "            audiExcel_raw.write(\"C\" + str(totalCar + 1), km2.string) \n",
    "            temp2 = \"\"\n",
    "            for char2 in km2.string.strip():\n",
    "                if char2.isnumeric():\n",
    "                    temp2 += char2\n",
    "            km2.string = temp2\n",
    "            audiExcel_preprocess.write(\"C\" + str(totalCar + 1), int(km2.string))\n",
    "            \n",
    "            ## YIL\n",
    "            audiExcel_raw.write(\"D\" + str(totalCar + 1), age2.string.split(\"/\")[1])\n",
    "            audiExcel_preprocess.write(\"D\" + str(totalCar + 1), age2.string.split(\"/\")[1]) \n",
    "    \n",
    "    page+=1; \n",
    "        \n",
    "print(\"Finish\")\n",
    "audiExcel.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
